# ===================================================================
# 1. 베이스 이미지(Base Image) 선택
# ===================================================================
# Docker 이미지는 여러 개의 레이어(Layer)로 구성됩니다.
# FROM 명령어는 그 시작점이 되는 운영체제 이미지를 지정합니다.
# 'alpine'은 매우 가벼운 리눅스 배포판으로, 최소한의 기능만 포함하고 있어
# 최종 이미지의 크기를 작게 유지하는 데 매우 유리합니다.
# 최신 버전을 사용하기 위해 'alpine:latest' 태그를 사용합니다.
FROM alpine:latest


# ===================================================================
# 2. SQLite3 패키지 설치
# ===================================================================
# RUN 명령어는 이미지 빌드 과정에서 실행될 셸 명령어를 지정합니다.
# Alpine 리눅스는 'apk'라는 패키지 매니저를 사용합니다.
# 'apk add'는 새로운 패키지를 설치하는 명령어입니다.
# '--no-cache' 옵션은 패키지 설치 후 불필요한 캐시 파일을 남기지 않아
# 이미지 용량을 최적화하는 데 도움을 주는 좋은 습관입니다.
RUN apk add --no-cache sqlite


# ===================================================================
# 3. 작업 디렉토리(Working Directory) 설정
# ===================================================================
# WORKDIR 명령어는 컨테이너가 실행될 때 기본으로 사용할 디렉토리를 지정합니다.
# 여기서 생성하는 데이터베이스 파일들이 저장될 공간입니다.
# 이 경로를 지정해두면, 컨테이너에 접속했을 때 바로 이 '/db' 폴더에서 시작하게 됩니다.
WORKDIR /db


# ===================================================================
# 4. 볼륨(Volume) 마운트 지점 설정
# ===================================================================
# VOLUME 명령어는 컨테이너의 특정 디렉토리를 호스트 PC와 연결할 수 있도록
# 공식적인 '데이터 저장 지점'으로 선언하는 역할을 합니다.
# 이렇게 하면 컨테이너가 삭제되더라도 데이터베이스 파일은 PC에 그대로 남아
# 데이터 영속성(Persistence)을 보장할 수 있습니다.
VOLUME /db


# 컨테이너가 시작될 때 실행할 기본 명령어를 설정합니다.
# 여기서는 컨테이너가 바로 종료되지 않도록 sleep 명령어를 사용합니다.
CMD ["sleep", "infinity"]


# ===================================================================
# 5. 컨테이너 실행 시 기본 명령어(Entrypoint) 설정
# ===================================================================
# ENTRYPOINT 명령어는 'docker run'으로 컨테이너를 시작할 때
# 기본으로 실행될 명령어를 지정합니다.
# 여기서는 컨테이너가 시작되자마자 바로 'sqlite3' 대화형 셸이
# 실행되도록 설정하여, 사용자가 즉시 SQLite 명령어를 입력할 수 있게 합니다.
# ENTRYPOINT ["sqlite3"]


